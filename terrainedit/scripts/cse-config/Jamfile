SubDir TOP scripts cse-config ;

# Generate cse-config
rule CseConfigGen
{
  SEARCH on cse-config.template = $(SUBDIR) ;
  MakeLocate $(<) : $(LOCATE.TARGETS) ;
  Depends $(<) : cse-config.template Jamfile Jamconfig [ ConcatDirs $(SUBDIR) Jamfile ] ;
  
  local l d e s liblist libdep libdepstr libstrings libaddstrings libbasestrs libbase libswitchcase ;
  
  for l in $(INSTALLEDLIBS) $(INSTALLEDLIBS_OPTIONAL)
  {
    libbase = [ LibraryBaseName $(l) ] ;
    libaddstrings += "    $(l)) \
	addlib \"-l$(libbase)\" 	\
	;;			\
" ;
    libdep = ;
    for d in $($(l)_depends)
    {
      local depbase = [ LibraryBaseName $(d) ] ;
      libdep += -l$(depbase) ;
    }
    for e in $($(l).EXTERNALLIBS)
    {
      libdep += $($(e).LFLAGS) ;
    }
    libdepstr = "" ;
    for s in $(libdep)
    {
      libdepstr = "$(libdepstr) $(s)" ;
    }
    libstrings += "       -l$(libbase)) DEPS=\"$(libdepstr)\" ;;\
" ;
    libbasestrs += "lib$(l)=$(libbase)
" ;
  }

  # Hack to have cs-config fake indirection on ubuntu dash
  for l in $(INSTALLEDLIBS) $(INSTALLEDLIBS_OPTIONAL)
  {
    # split this up since it seems impossible to escape \$
    libbase = [ LibraryBaseName $(l) ] ;
    libswitchcase += "   \"$(l)\"):
      libbase=$(libbase) ;;
" ;
  }

  liblist on $(<) = [ Sort $(INSTALLEDLIBS) ] ;
  liblist_opt on $(<) = [ Sort $(INSTALLEDLIBS_OPTIONAL) ] ;
  libstrings on $(<) = $(libstrings) ;
  libaddstrings on $(<) = $(libaddstrings) ;
  libbasestrs on $(<) = $(libbasestrs) ;
  libswitchcase on $(<) = $(libswitchcase) ;
  ENV_VERSION on $(<) = $(PACKAGE_VERSION_LIST[1])_$(PACKAGE_VERSION_LIST[2]) ;

  CseConfigGen1 $(<) : cse-config.template ;
}

actions CseConfigGen1
{
  cat > $(<) << __END__
#!/bin/sh
# cse-config -- Autogenerated.

# From autoconf:
# The user is always right.
if test "\${PATH_SEPARATOR+set}" != set; then
  echo "#! /bin/sh" >conf\$\$.sh
  echo  "exit 0"   >>conf\$\$.sh
  chmod +x conf\$\$.sh
  if (PATH="/nonexistent;."; conf\$\$.sh) >/dev/null 2>&1; then
    PATH_SEPARATOR=';'
  else
    PATH_SEPARATOR=:
  fi
  rm -f conf\$\$.sh
fi

CSE="\${CSE-$(prefix)\$PATH_SEPARATOR.}"
CSE_$(ENV_VERSION)="\${CSE_$(ENV_VERSION)-\$CSE}"
my_IFS=\$IFS; IFS=\$PATH_SEPARATOR
for p in \$CSE_$(ENV_VERSION)
do
  prefix="\${p}"
  exec_prefix="\${prefix}"
  makeout="$(LOCATE.OBJECTS)"
  version="$(PACKAGE_VERSION)"
  longversion="$(PACKAGE_STRING)"
  newincdir=""
  # try to determine if we're in a source or installed CSE version
  if test "x\$includedir_main" = "x"
  then
    if [ -r \${prefix}/include/$(PACKAGE_NAME)-$(PACKAGE_VERSION)/cseversion.h ] ; then
      newincdir="\${prefix}/include/$(PACKAGE_NAME)-$(PACKAGE_VERSION)"
      includedir_main=\$newincdir
    elif [ -r \${prefix}/include/cseversion.h ] ; then
      newincdir="\${prefix}/include"
      includedir_main=\$newincdir
    fi
  fi
  if test "x\$includedir_config" = "x"
  then
    if [ -r \${prefix}/include/$(PACKAGE_NAME)-$(PACKAGE_VERSION)/cseconfig.h ] ; then
      newincdir="\${prefix}/include/$(PACKAGE_NAME)-$(PACKAGE_VERSION)"
      includedir_config=\$newincdir
    elif [ -r \${prefix}/include/cseconfig.h ] ; then
      newincdir="\${prefix}/include"
      includedir_config=\$newincdir
    fi
  fi
  if test -n "\$newincdir"
  then
    if test "x\$includedir" = "x"
    then
      includedir="\$newincdir"
    else
      includedir="\$includedir\$PATH_SEPARATOR\$newincdir"
    fi
  fi
done
IFS=\$my_IFS
if test "x\$includedir" = "x"
then
  includedir="$(appincdir)"
fi

syslibs=" $(LINKLIBS) "
common_cflags=" $(COMPILER.CFLAGS.MANDATORY) "
common_cxxflags=" $(COMPILER.CFLAGS.MANDATORY) $(COMPILER.C++FLAGS.MANDATORY) "
staticdeps="$(STATICPLUGINS.DEPENDENCIES)"

# dependencies of CSE
depends()
{
    case \$1 in
 $(libstrings)
    esac
}

checklibname()
{
    case \$1 in
 $(libaddstrings)
    esac
}

libs="\
 $(liblist)
"
libs_opt="\
 $(liblist_opt)
"

$(libbasestrs)

__END__

  cat >> $(<) << __END__

# Hack to do variable indirection for posix compliant systems that don't use bash (like ubuntu)
give_libbase()
{
  case \$1 in
 $(libswitchcase)
    *)
      # should never ever happen
      echo "Internal error, due to unspecified libbase."
      exit;;
    esac
}

__END__
  cat $(>) >> $(<)
}

CSECONFIGNAME = cse-config-$(PACKAGE_VERSION_SIGNIFICANT) ;
ShellScript $(CSECONFIGNAME) : CseConfigGen : nohelp ;

Depends cse-config : $(CSECONFIGNAME) ;
CSE_CONFIG_GRISTED = [ DoSourceGrist cse-config ] ;
SEARCH on $(CSE_CONFIG_GRISTED) = $(SUBDIR) ;
MakeLocate cse-config : $(LOCATE.TARGETS) ;
Depends cse-config : $(CSE_CONFIG_GRISTED) ;
Copy cse-config : $(CSE_CONFIG_GRISTED) ;
Always cse-configclean ;
NotFile cse-configclean ;
Clean cse-configclean : cse-config $(CSECONFIGNAME) ;
Depends clean : cse-configclean ;
Help cse-config : "Build the cse-config script" ;
Depends install_bin : [ DoInstall cse-config : $(bindir) : $(INSTALL_PROGRAM) ] ;
